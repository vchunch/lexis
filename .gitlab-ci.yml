variables:
  TERRAFORM_VERSION: '1.1.2'
  # Default region for AWS calls
  AWS_DEFAULT_REGION: us-east-1
  # Which AWS account to default to
  CODE_BUCKET: lexis-nexis-risk-code-bucket
  BACKEND_BUCKET: tfbackend-lexis-nexis-bucket
  DYNAMODB_TABLE_NAME: tfbackend-lexis-nexis-tfstatelock

.awscli-image: &awscli-image
  image:
    name: amazon/aws-cli
    # Entrypoint is also needed as image by default sets `aws` binary as an entrypoint.
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


stages:
  - CI-Code-Bucket
  - CI-Code-Push
  - CD-Source-Object
  - CD-Image-Build
  - CD-Dynamo-DB
  - CD-Backend
  - CD-TF-Base
  - CD-TF-Plan
  - CD-TF-Apply

default:
    # Only the build stage actually requires a `virt` tagged runner, the rest can use `docker`
    tags:
        - docker

code-bucket:
  stage: CI-Code-Bucket
  <<: *awscli-image
  script: |
    echo "Checking if Code bucket is available else creating"
    aws s3 ls | grep -i "$CODE_BUCKET" || aws s3 mb s3://$CODE_BUCKET --region us-east-1 && aws s3api put-bucket-versioning --bucket $CODE_BUCKET --versioning-configuration Status=Enabled

# This step included in case youwanted to keep the repo for CI and CD should be different.
# The development code will be pushed to repository might be Nexus or any other of your choice . 
# Here I am using S3 bucket
source-code-push:
  stage: CI-Code-Push
  <<: *awscli-image
  variables:
    AWS_REGION: us-east-1
  script:
    - aws s3 cp ./webapp s3://$CODE_BUCKET/ --recursive --exclude "*" --include "*.html"  --sse aws:kms
  after_script:
    - 'echo -e "The html objects were uploaded successfully"'
  
source-object:
  stage: CD-Source-Object
  <<: *awscli-image
  artifacts:
    expire_in: 1h
    paths:
      - "$CI_PROJECT_DIR/"
  variables:
    AWS_REGION: us-east-1
  script:
    - aws s3 cp s3://$CODE_BUCKET/index.html $CI_PROJECT_DIR/lexis/ --sse aws:kms
    - ls -la $CI_PROJECT_DIR/lexis
  after_script:
    - 'echo -e "The html objects are downloaded successfully"'      

get-packer:
  stage: CD-Image-Build
  image: "ubuntu:20.04"
 
  script:
    - apt-get update
    - apt upgrade
    - apt-get install wget unzip -y
    - wget https://releases.hashicorp.com/packer/1.7.8/packer_1.7.8_linux_amd64.zip
    - unzip packer_1.7.8_linux_amd64.zip
    - chmod +x packer
    - ls -la 
    - ls -la $CI_PROJECT_DIR/lexis
    - ./packer --version
    - ./packer validate ./lexis/vm.pkr.hcl
    - ./packer build ./lexis/vm.pkr.hcl
 
  
dynamodb-table:
  stage: CD-Dynamo-DB
  <<: *awscli-image
  script:
    - echo "Checking if dynamoDB table is available else creating"
    - aws dynamodb list-tables | grep -i "$DYNAMODB_TABLE_NAME" || aws dynamodb create-table --table-name $DYNAMODB_TABLE_NAME --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=2,WriteCapacityUnits=2

backend:
  stage: CD-Backend
  <<: *awscli-image
  script: |
    echo "Checking if Backend is available else creating"
    aws s3 ls | grep -i "$BACKEND_BUCKET" || aws s3 mb s3://$BACKEND_BUCKET --region us-east-1 && aws s3api put-bucket-versioning --bucket $BACKEND_BUCKET --versioning-configuration Status=Enabled

.terraform-image: &terraform-image
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'


terraform_base:
  stage: CD-TF-Base
  <<: *terraform-image
  # No env for validate
  script:
    - rm -rf .terraform
    - terraform --version
    - echo "$CI_PROJECT_DIR"
    - cd $CI_PROJECT_DIR
    - pwd
    - terraform fmt
    
plan_nonprod:
  stage: CD-TF-Plan
  <<: *terraform-image
  artifacts:
    expire_in: 1h
    paths:
      - "$CI_PROJECT_DIR/ec2_terraform"
  script:
    - cd $CI_PROJECT_DIR/ec2_terraform
    - terraform init
    - terraform plan -input=false -var-file=./terraform.tfvars -out="plan.tfplan"

apply_nonprod:
  stage: CD-TF-Apply
  <<: *terraform-image
  script:
    - cd $CI_PROJECT_DIR/ec2_terraform
    - terraform apply plan.tfplan
  when: manual  